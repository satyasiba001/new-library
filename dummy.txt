// query := `
	// 	INSERT INTO member (member_id, name, age, add_date)
	// 	VALUES ($1, $2, $3, $4)
	// 	`
	// url := "http://localhost:8080/readBodyData"

	// response, err := http.Get(url)
	// if err != nil {
	// 	log.Fatalf("Failed to make request: %v", err)
	// }
	// // defer response.Body.Close()

	// body, err := io.ReadAll(response.Body)
	// if err != nil {
	// 	log.Fatalf("Failed to read response body: %v", err)
	// }
	// fmt.Println(body)

	// body, err := io.ReadAll(c.Request.Body)
	// if err != nil {
	// 	c.JSON(http.StatusBadRequest, gin.H{"error": "Failed to read body"})
	// 	return
	// }


	func dbConnection()(*sql.DB, error){
	// connection string
	psqlconn := fmt.Sprintf("host= %s port = %d user = %s password= %s dbname= %s sslmode= %s",host,port ,user, pas sword,dbname,sslmode)

	// connection open
	db, err := sql.Open("postgres",psqlconn)
	if err != nil{
		return nil, fmt.Printf("DB connection failed %v\n",err)
	}

	return db, nil
}
// insertStmnt := `insert into "members" values(7821, 'kriti', 'kriti@example.com',8873422290, '2024-07-11', 'A003');`
	// _ ,e := db.Exec(insertStmnt)
	// if e != nil{
	// 	fmt.Println(" insertion failed %v",e)
	// }


	// fmt.Println("memberid:", userDataa.Member_id)
	// fmt.Println("name:", userDataa.Name)
	// fmt.Println("age:", userDataa.Age)
	// fmt.Println("adddate:", userDataa.Add_date)

	// database.DbConnection()
	// fmt.Println("boo id",newBoook)
	// fmt.Println("book name",newBook.name)
	// fmt.Println("book author",newBook.author)
	// fmt.Println("book count",newBook.count)



	// intValue, err := strconv.Atoi(countOfBooks)
	// fmt.Printf("%T", bookcount)
	// if er != nil {
	// 	fmt.Println("no new book added to the library")
	// 	return
	// }

	// c.JSON(200, gin.H{"Status": 1, "msg": "new book arrived to the library"})


	router.GET("/getData", getData)
	router.GET("/getBodyData", readBodyData)
	router.GET("/getQueryParam", readParam)
	router.GET("/getUrlData/:name/:age", readUrldata)


	func getData(c *gin.Context) {
	c.JSON(200, gin.H{"data": "hi, I am gin"})
}

func readBodyData(c *gin.Context) {
	body := c.Request.Body
	value, _ := io.ReadAll(body)
	c.JSON(200, gin.H{"bodyData": string(value)})
}

func readParam(c *gin.Context) {
	name := c.Query("name")
	age := c.Query("age")
	c.JSON(200, gin.H{"namefromquery": name, "agefromquery": age})
}
func readUrldata(c *gin.Context) {
	name := c.Param("name")
	age := c.Param("age")
	c.JSON(200, gin.H{"namefromurl": name, "agefromurl": age})
}